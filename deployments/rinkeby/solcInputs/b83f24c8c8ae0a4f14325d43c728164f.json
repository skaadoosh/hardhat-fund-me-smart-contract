{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n import \"./priceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n\n    using priceConverter for uint256;\n\n    uint256 public constant MIN_AMT = 100;\n    address immutable owner;\n\n    mapping(address => uint256) public amtDonated;\n    address[] public funders;\n    AggregatorV3Interface ethToUsdAddr;\n\n    constructor(address _priceFeed) {\n        owner = msg.sender;\n        ethToUsdAddr=AggregatorV3Interface(_priceFeed);\n    }\n\n    function getval(uint val) public view returns(uint256){\n        return val.getLatestPrice(ethToUsdAddr);\n    }\n\n    function fund() public payable {\n        require(msg.value.getLatestPrice(ethToUsdAddr) >= MIN_AMT, \"Please fund atleast 100Rs\");\n        amtDonated[msg.sender] += msg.value;\n        funders.push(msg.sender);\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert NotOwner();\n        _;\n    }\n\n    function withdraw() public payable onlyOwner {\n\n        for (uint256 funderIndex = 0;funderIndex < funders.length;funderIndex++) {\n            address funder = funders[funderIndex];\n            amtDonated[funder] = 0;\n        }\n        funders = new address[](0);\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(sent, \"Witdraw failed\");\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/priceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary priceConverter{\r\n\r\n    \r\n    function getLatestPrice(uint256 ethUsd, AggregatorV3Interface addr) public view returns (uint256) {\r\n        ( ,int price,,,) = addr.latestRoundData();\r\n        return uint(price)*ethUsd;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}